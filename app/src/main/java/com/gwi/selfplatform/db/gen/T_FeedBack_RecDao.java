package com.gwi.selfplatform.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table T__FEED_BACK__REC.
*/
public class T_FeedBack_RecDao extends AbstractDao<T_FeedBack_Rec, Long> {

    public static final String TABLENAME = "T__FEED_BACK__REC";

    /**
     * Properties of entity T_FeedBack_Rec.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property RecNo = new Property(0, long.class, "RecNo", true, "REC_NO");
        public final static Property UserCode = new Property(1, String.class, "UserCode", false, "USER_CODE");
        public final static Property PhoneNumber = new Property(2, String.class, "PhoneNumber", false, "PHONE_NUMBER");
        public final static Property Advice = new Property(3, String.class, "Advice", false, "ADVICE");
        public final static Property Source = new Property(4, Integer.class, "Source", false, "SOURCE");
        public final static Property Type = new Property(5, Integer.class, "Type", false, "TYPE");
        public final static Property Status = new Property(6, Integer.class, "Status", false, "STATUS");
        public final static Property RecDate = new Property(7, java.util.Date.class, "RecDate", false, "REC_DATE");
        public final static Property DealDate = new Property(8, java.util.Date.class, "DealDate", false, "DEAL_DATE");
        public final static Property DealMan = new Property(9, String.class, "DealMan", false, "DEAL_MAN");
    };


    public T_FeedBack_RecDao(DaoConfig config) {
        super(config);
    }
    
    public T_FeedBack_RecDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'T__FEED_BACK__REC' (" + //
                "'REC_NO' INTEGER PRIMARY KEY NOT NULL UNIQUE ," + // 0: RecNo
                "'USER_CODE' TEXT," + // 1: UserCode
                "'PHONE_NUMBER' TEXT," + // 2: PhoneNumber
                "'ADVICE' TEXT," + // 3: Advice
                "'SOURCE' INTEGER," + // 4: Source
                "'TYPE' INTEGER," + // 5: Type
                "'STATUS' INTEGER," + // 6: Status
                "'REC_DATE' INTEGER," + // 7: RecDate
                "'DEAL_DATE' INTEGER," + // 8: DealDate
                "'DEAL_MAN' TEXT);"); // 9: DealMan
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'T__FEED_BACK__REC'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, T_FeedBack_Rec entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getRecNo());
 
        String UserCode = entity.getUserCode();
        if (UserCode != null) {
            stmt.bindString(2, UserCode);
        }
 
        String PhoneNumber = entity.getPhoneNumber();
        if (PhoneNumber != null) {
            stmt.bindString(3, PhoneNumber);
        }
 
        String Advice = entity.getAdvice();
        if (Advice != null) {
            stmt.bindString(4, Advice);
        }
 
        Integer Source = entity.getSource();
        if (Source != null) {
            stmt.bindLong(5, Source);
        }
 
        Integer Type = entity.getType();
        if (Type != null) {
            stmt.bindLong(6, Type);
        }
 
        Integer Status = entity.getStatus();
        if (Status != null) {
            stmt.bindLong(7, Status);
        }
 
        java.util.Date RecDate = entity.getRecDate();
        if (RecDate != null) {
            stmt.bindLong(8, RecDate.getTime());
        }
 
        java.util.Date DealDate = entity.getDealDate();
        if (DealDate != null) {
            stmt.bindLong(9, DealDate.getTime());
        }
 
        String DealMan = entity.getDealMan();
        if (DealMan != null) {
            stmt.bindString(10, DealMan);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public T_FeedBack_Rec readEntity(Cursor cursor, int offset) {
        T_FeedBack_Rec entity = new T_FeedBack_Rec( //
            cursor.getLong(offset + 0), // RecNo
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // UserCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // PhoneNumber
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Advice
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // Source
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // Type
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // Status
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // RecDate
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // DealDate
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // DealMan
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, T_FeedBack_Rec entity, int offset) {
        entity.setRecNo(cursor.getLong(offset + 0));
        entity.setUserCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPhoneNumber(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAdvice(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSource(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setType(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setStatus(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setRecDate(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setDealDate(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setDealMan(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(T_FeedBack_Rec entity, long rowId) {
        entity.setRecNo(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(T_FeedBack_Rec entity) {
        if(entity != null) {
            return entity.getRecNo();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
