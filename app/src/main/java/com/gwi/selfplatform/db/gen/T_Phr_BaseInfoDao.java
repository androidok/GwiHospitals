package com.gwi.selfplatform.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table T__PHR__BASE_INFO.
*/
public class T_Phr_BaseInfoDao extends AbstractDao<T_Phr_BaseInfo, String> {

    public static final String TABLENAME = "T__PHR__BASE_INFO";

    /**
     * Properties of entity T_Phr_BaseInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property EhrID = new Property(0, String.class, "EhrID", true, "EHR_ID");
        public final static Property EhrCode = new Property(1, String.class, "EhrCode", false, "EHR_CODE");
        public final static Property Name = new Property(2, String.class, "Name", false, "NAME");
        public final static Property Sex = new Property(3, Integer.class, "Sex", false, "SEX");
        public final static Property BirthDay = new Property(4, java.util.Date.class, "BirthDay", false, "BIRTH_DAY");
        public final static Property IDCard = new Property(5, String.class, "IDCard", false, "IDCARD");
        public final static Property NowAddressCode = new Property(6, String.class, "NowAddressCode", false, "NOW_ADDRESS_CODE");
        public final static Property NowAddress = new Property(7, String.class, "NowAddress", false, "NOW_ADDRESS");
        public final static Property RegAddressCode = new Property(8, String.class, "RegAddressCode", false, "REG_ADDRESS_CODE");
        public final static Property RegAddress = new Property(9, String.class, "RegAddress", false, "REG_ADDRESS");
        public final static Property WorkUnit = new Property(10, String.class, "WorkUnit", false, "WORK_UNIT");
        public final static Property SelfPhone = new Property(11, String.class, "SelfPhone", false, "SELF_PHONE");
        public final static Property RelationName = new Property(12, String.class, "RelationName", false, "RELATION_NAME");
        public final static Property RelationPhone = new Property(13, String.class, "RelationPhone", false, "RELATION_PHONE");
        public final static Property LiveType = new Property(14, Integer.class, "LiveType", false, "LIVE_TYPE");
        public final static Property Nation = new Property(15, Integer.class, "Nation", false, "NATION");
        public final static Property BloodType = new Property(16, Integer.class, "BloodType", false, "BLOOD_TYPE");
        public final static Property EduDegree = new Property(17, Integer.class, "EduDegree", false, "EDU_DEGREE");
        public final static Property Occupation = new Property(18, Integer.class, "Occupation", false, "OCCUPATION");
        public final static Property MaritalStatus = new Property(19, Integer.class, "MaritalStatus", false, "MARITAL_STATUS");
        public final static Property PayType = new Property(20, Integer.class, "PayType", false, "PAY_TYPE");
        public final static Property OlderDisease = new Property(21, String.class, "OlderDisease", false, "OLDER_DISEASE");
        public final static Property CreateOrg = new Property(22, String.class, "CreateOrg", false, "CREATE_ORG");
        public final static Property CreateMan = new Property(23, String.class, "CreateMan", false, "CREATE_MAN");
        public final static Property UserId = new Property(24, Long.class, "UserId", false, "USER_ID");
        public final static Property Alias = new Property(25, String.class, "Alias", false, "ALIAS");
    };


    public T_Phr_BaseInfoDao(DaoConfig config) {
        super(config);
    }
    
    public T_Phr_BaseInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'T__PHR__BASE_INFO' (" + //
                "'EHR_ID' TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: EhrID
                "'EHR_CODE' TEXT," + // 1: EhrCode
                "'NAME' TEXT," + // 2: Name
                "'SEX' INTEGER," + // 3: Sex
                "'BIRTH_DAY' INTEGER," + // 4: BirthDay
                "'IDCARD' TEXT," + // 5: IDCard
                "'NOW_ADDRESS_CODE' TEXT," + // 6: NowAddressCode
                "'NOW_ADDRESS' TEXT," + // 7: NowAddress
                "'REG_ADDRESS_CODE' TEXT," + // 8: RegAddressCode
                "'REG_ADDRESS' TEXT," + // 9: RegAddress
                "'WORK_UNIT' TEXT," + // 10: WorkUnit
                "'SELF_PHONE' TEXT," + // 11: SelfPhone
                "'RELATION_NAME' TEXT," + // 12: RelationName
                "'RELATION_PHONE' TEXT," + // 13: RelationPhone
                "'LIVE_TYPE' INTEGER," + // 14: LiveType
                "'NATION' INTEGER," + // 15: Nation
                "'BLOOD_TYPE' INTEGER," + // 16: BloodType
                "'EDU_DEGREE' INTEGER," + // 17: EduDegree
                "'OCCUPATION' INTEGER," + // 18: Occupation
                "'MARITAL_STATUS' INTEGER," + // 19: MaritalStatus
                "'PAY_TYPE' INTEGER," + // 20: PayType
                "'OLDER_DISEASE' TEXT," + // 21: OlderDisease
                "'CREATE_ORG' TEXT," + // 22: CreateOrg
                "'CREATE_MAN' TEXT," + // 23: CreateMan
                "'USER_ID' INTEGER," + // 24: UserId
                "'ALIAS' TEXT);"); // 25: Alias
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'T__PHR__BASE_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, T_Phr_BaseInfo entity) {
        stmt.clearBindings();
 
        String EhrID = entity.getEhrID();
        if (EhrID != null) {
            stmt.bindString(1, EhrID);
        }
 
        String EhrCode = entity.getEhrCode();
        if (EhrCode != null) {
            stmt.bindString(2, EhrCode);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(3, Name);
        }
 
        Integer Sex = entity.getSex();
        if (Sex != null) {
            stmt.bindLong(4, Sex);
        }
 
        java.util.Date BirthDay = entity.getBirthDay();
        if (BirthDay != null) {
            stmt.bindLong(5, BirthDay.getTime());
        }
 
        String IDCard = entity.getIDCard();
        if (IDCard != null) {
            stmt.bindString(6, IDCard);
        }
 
        String NowAddressCode = entity.getNowAddressCode();
        if (NowAddressCode != null) {
            stmt.bindString(7, NowAddressCode);
        }
 
        String NowAddress = entity.getNowAddress();
        if (NowAddress != null) {
            stmt.bindString(8, NowAddress);
        }
 
        String RegAddressCode = entity.getRegAddressCode();
        if (RegAddressCode != null) {
            stmt.bindString(9, RegAddressCode);
        }
 
        String RegAddress = entity.getRegAddress();
        if (RegAddress != null) {
            stmt.bindString(10, RegAddress);
        }
 
        String WorkUnit = entity.getWorkUnit();
        if (WorkUnit != null) {
            stmt.bindString(11, WorkUnit);
        }
 
        String SelfPhone = entity.getSelfPhone();
        if (SelfPhone != null) {
            stmt.bindString(12, SelfPhone);
        }
 
        String RelationName = entity.getRelationName();
        if (RelationName != null) {
            stmt.bindString(13, RelationName);
        }
 
        String RelationPhone = entity.getRelationPhone();
        if (RelationPhone != null) {
            stmt.bindString(14, RelationPhone);
        }
 
        Integer LiveType = entity.getLiveType();
        if (LiveType != null) {
            stmt.bindLong(15, LiveType);
        }
 
        Integer Nation = entity.getNation();
        if (Nation != null) {
            stmt.bindLong(16, Nation);
        }
 
        Integer BloodType = entity.getBloodType();
        if (BloodType != null) {
            stmt.bindLong(17, BloodType);
        }
 
        Integer EduDegree = entity.getEduDegree();
        if (EduDegree != null) {
            stmt.bindLong(18, EduDegree);
        }
 
        Integer Occupation = entity.getOccupation();
        if (Occupation != null) {
            stmt.bindLong(19, Occupation);
        }
 
        Integer MaritalStatus = entity.getMaritalStatus();
        if (MaritalStatus != null) {
            stmt.bindLong(20, MaritalStatus);
        }
 
        Integer PayType = entity.getPayType();
        if (PayType != null) {
            stmt.bindLong(21, PayType);
        }
 
        String OlderDisease = entity.getOlderDisease();
        if (OlderDisease != null) {
            stmt.bindString(22, OlderDisease);
        }
 
        String CreateOrg = entity.getCreateOrg();
        if (CreateOrg != null) {
            stmt.bindString(23, CreateOrg);
        }
 
        String CreateMan = entity.getCreateMan();
        if (CreateMan != null) {
            stmt.bindString(24, CreateMan);
        }
 
        Long UserId = entity.getUserId();
        if (UserId != null) {
            stmt.bindLong(25, UserId);
        }
 
        String Alias = entity.getAlias();
        if (Alias != null) {
            stmt.bindString(26, Alias);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public T_Phr_BaseInfo readEntity(Cursor cursor, int offset) {
        T_Phr_BaseInfo entity = new T_Phr_BaseInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // EhrID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // EhrCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Name
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // Sex
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // BirthDay
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // IDCard
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // NowAddressCode
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // NowAddress
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // RegAddressCode
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // RegAddress
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // WorkUnit
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // SelfPhone
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // RelationName
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // RelationPhone
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // LiveType
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // Nation
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // BloodType
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // EduDegree
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // Occupation
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19), // MaritalStatus
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // PayType
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // OlderDisease
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // CreateOrg
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // CreateMan
            cursor.isNull(offset + 24) ? null : cursor.getLong(offset + 24), // UserId
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25) // Alias
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, T_Phr_BaseInfo entity, int offset) {
        entity.setEhrID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setEhrCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSex(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setBirthDay(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setIDCard(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNowAddressCode(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNowAddress(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRegAddressCode(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRegAddress(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setWorkUnit(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSelfPhone(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setRelationName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setRelationPhone(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setLiveType(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setNation(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setBloodType(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setEduDegree(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setOccupation(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setMaritalStatus(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
        entity.setPayType(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setOlderDisease(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setCreateOrg(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setCreateMan(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setUserId(cursor.isNull(offset + 24) ? null : cursor.getLong(offset + 24));
        entity.setAlias(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(T_Phr_BaseInfo entity, long rowId) {
        return entity.getEhrID();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(T_Phr_BaseInfo entity) {
        if(entity != null) {
            return entity.getEhrID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
