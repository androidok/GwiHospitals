package com.gwi.selfplatform.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table T__PHR__SIGN_REC.
*/
public class T_Phr_SignRecDao extends AbstractDao<T_Phr_SignRec, Long> {

    public static final String TABLENAME = "T__PHR__SIGN_REC";

    /**
     * Properties of entity T_Phr_SignRec.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property RecNo = new Property(0, Long.class, "RecNo", true, "REC_NO");
        public final static Property EhrID = new Property(1, String.class, "EhrID", false, "EHR_ID");
        public final static Property GroupId = new Property(2, String.class, "GroupId", false, "GROUP_ID");
        public final static Property SignCode = new Property(3, int.class, "SignCode", false, "SIGN_CODE");
        public final static Property SignValue = new Property(4, String.class, "SignValue", false, "SIGN_VALUE");
        public final static Property SignEstimate = new Property(5, String.class, "SignEstimate", false, "SIGN_ESTIMATE");
        public final static Property RecordDate = new Property(6, java.util.Date.class, "RecordDate", false, "RECORD_DATE");
        public final static Property TerminalNo = new Property(7, String.class, "TerminalNo", false, "TERMINAL_NO");
        public final static Property UpdateFlag = new Property(8, Boolean.class, "UpdateFlag", false, "UPDATE_FLAG");
    };


    public T_Phr_SignRecDao(DaoConfig config) {
        super(config);
    }
    
    public T_Phr_SignRecDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'T__PHR__SIGN_REC' (" + //
                "'REC_NO' INTEGER PRIMARY KEY UNIQUE ," + // 0: RecNo
                "'EHR_ID' TEXT NOT NULL ," + // 1: EhrID
                "'GROUP_ID' TEXT NOT NULL ," + // 2: GroupId
                "'SIGN_CODE' INTEGER NOT NULL ," + // 3: SignCode
                "'SIGN_VALUE' TEXT," + // 4: SignValue
                "'SIGN_ESTIMATE' TEXT," + // 5: SignEstimate
                "'RECORD_DATE' INTEGER," + // 6: RecordDate
                "'TERMINAL_NO' TEXT," + // 7: TerminalNo
                "'UPDATE_FLAG' INTEGER);"); // 8: UpdateFlag
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'T__PHR__SIGN_REC'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, T_Phr_SignRec entity) {
        stmt.clearBindings();
 
        Long RecNo = entity.getRecNo();
        if (RecNo != null) {
            stmt.bindLong(1, RecNo);
        }
        stmt.bindString(2, entity.getEhrID());
        stmt.bindString(3, entity.getGroupId());
        stmt.bindLong(4, entity.getSignCode());
 
        String SignValue = entity.getSignValue();
        if (SignValue != null) {
            stmt.bindString(5, SignValue);
        }
 
        String SignEstimate = entity.getSignEstimate();
        if (SignEstimate != null) {
            stmt.bindString(6, SignEstimate);
        }
 
        java.util.Date RecordDate = entity.getRecordDate();
        if (RecordDate != null) {
            stmt.bindLong(7, RecordDate.getTime());
        }
 
        String TerminalNo = entity.getTerminalNo();
        if (TerminalNo != null) {
            stmt.bindString(8, TerminalNo);
        }
 
        Boolean UpdateFlag = entity.getUpdateFlag();
        if (UpdateFlag != null) {
            stmt.bindLong(9, UpdateFlag ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public T_Phr_SignRec readEntity(Cursor cursor, int offset) {
        T_Phr_SignRec entity = new T_Phr_SignRec( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // RecNo
            cursor.getString(offset + 1), // EhrID
            cursor.getString(offset + 2), // GroupId
            cursor.getInt(offset + 3), // SignCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // SignValue
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // SignEstimate
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // RecordDate
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // TerminalNo
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0 // UpdateFlag
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, T_Phr_SignRec entity, int offset) {
        entity.setRecNo(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEhrID(cursor.getString(offset + 1));
        entity.setGroupId(cursor.getString(offset + 2));
        entity.setSignCode(cursor.getInt(offset + 3));
        entity.setSignValue(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSignEstimate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRecordDate(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setTerminalNo(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUpdateFlag(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(T_Phr_SignRec entity, long rowId) {
        entity.setRecNo(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(T_Phr_SignRec entity) {
        if(entity != null) {
            return entity.getRecNo();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
