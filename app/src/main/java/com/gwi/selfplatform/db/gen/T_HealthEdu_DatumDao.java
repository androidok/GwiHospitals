package com.gwi.selfplatform.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table T__HEALTH_EDU__DATUM.
*/
public class T_HealthEdu_DatumDao extends AbstractDao<T_HealthEdu_Datum, Long> {

    public static final String TABLENAME = "T__HEALTH_EDU__DATUM";

    /**
     * Properties of entity T_HealthEdu_Datum.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property DatumCode = new Property(0, Long.class, "DatumCode", true, "DATUM_CODE");
        public final static Property DatumName = new Property(1, String.class, "DatumName", false, "DATUM_NAME");
        public final static Property DatumIntro = new Property(2, String.class, "DatumIntro", false, "DATUM_INTRO");
        public final static Property DatumClass = new Property(3, Integer.class, "DatumClass", false, "DATUM_CLASS");
        public final static Property DatumContent = new Property(4, String.class, "DatumContent", false, "DATUM_CONTENT");
        public final static Property DatumPath = new Property(5, String.class, "DatumPath", false, "DATUM_PATH");
        public final static Property DatumSource = new Property(6, String.class, "DatumSource", false, "DATUM_SOURCE");
        public final static Property DatumAuthor = new Property(7, String.class, "DatumAuthor", false, "DATUM_AUTHOR");
        public final static Property RecordDate = new Property(8, java.util.Date.class, "RecordDate", false, "RECORD_DATE");
        public final static Property RecordMan = new Property(9, String.class, "RecordMan", false, "RECORD_MAN");
        public final static Property Status = new Property(10, Integer.class, "Status", false, "STATUS");
        public final static Property DatumLogo = new Property(11, String.class, "DatumLogo", false, "DATUM_LOGO");
    };


    public T_HealthEdu_DatumDao(DaoConfig config) {
        super(config);
    }
    
    public T_HealthEdu_DatumDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'T__HEALTH_EDU__DATUM' (" + //
                "'DATUM_CODE' INTEGER PRIMARY KEY UNIQUE ," + // 0: DatumCode
                "'DATUM_NAME' TEXT," + // 1: DatumName
                "'DATUM_INTRO' TEXT," + // 2: DatumIntro
                "'DATUM_CLASS' INTEGER," + // 3: DatumClass
                "'DATUM_CONTENT' TEXT," + // 4: DatumContent
                "'DATUM_PATH' TEXT," + // 5: DatumPath
                "'DATUM_SOURCE' TEXT," + // 6: DatumSource
                "'DATUM_AUTHOR' TEXT," + // 7: DatumAuthor
                "'RECORD_DATE' INTEGER," + // 8: RecordDate
                "'RECORD_MAN' TEXT," + // 9: RecordMan
                "'STATUS' INTEGER," + // 10: Status
                "'DATUM_LOGO' TEXT);"); // 11: DatumLogo
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'T__HEALTH_EDU__DATUM'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, T_HealthEdu_Datum entity) {
        stmt.clearBindings();
 
        Long DatumCode = entity.getDatumCode();
        if (DatumCode != null) {
            stmt.bindLong(1, DatumCode);
        }
 
        String DatumName = entity.getDatumName();
        if (DatumName != null) {
            stmt.bindString(2, DatumName);
        }
 
        String DatumIntro = entity.getDatumIntro();
        if (DatumIntro != null) {
            stmt.bindString(3, DatumIntro);
        }
 
        Integer DatumClass = entity.getDatumClass();
        if (DatumClass != null) {
            stmt.bindLong(4, DatumClass);
        }
 
        String DatumContent = entity.getDatumContent();
        if (DatumContent != null) {
            stmt.bindString(5, DatumContent);
        }
 
        String DatumPath = entity.getDatumPath();
        if (DatumPath != null) {
            stmt.bindString(6, DatumPath);
        }
 
        String DatumSource = entity.getDatumSource();
        if (DatumSource != null) {
            stmt.bindString(7, DatumSource);
        }
 
        String DatumAuthor = entity.getDatumAuthor();
        if (DatumAuthor != null) {
            stmt.bindString(8, DatumAuthor);
        }
 
        java.util.Date RecordDate = entity.getRecordDate();
        if (RecordDate != null) {
            stmt.bindLong(9, RecordDate.getTime());
        }
 
        String RecordMan = entity.getRecordMan();
        if (RecordMan != null) {
            stmt.bindString(10, RecordMan);
        }
 
        Integer Status = entity.getStatus();
        if (Status != null) {
            stmt.bindLong(11, Status);
        }
 
        String DatumLogo = entity.getDatumLogo();
        if (DatumLogo != null) {
            stmt.bindString(12, DatumLogo);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public T_HealthEdu_Datum readEntity(Cursor cursor, int offset) {
        T_HealthEdu_Datum entity = new T_HealthEdu_Datum( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // DatumCode
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // DatumName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // DatumIntro
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // DatumClass
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // DatumContent
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // DatumPath
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // DatumSource
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // DatumAuthor
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // RecordDate
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // RecordMan
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // Status
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // DatumLogo
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, T_HealthEdu_Datum entity, int offset) {
        entity.setDatumCode(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDatumName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDatumIntro(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDatumClass(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setDatumContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDatumPath(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDatumSource(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDatumAuthor(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRecordDate(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setRecordMan(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setStatus(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setDatumLogo(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(T_HealthEdu_Datum entity, long rowId) {
        entity.setDatumCode(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(T_HealthEdu_Datum entity) {
        if(entity != null) {
            return entity.getDatumCode();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
