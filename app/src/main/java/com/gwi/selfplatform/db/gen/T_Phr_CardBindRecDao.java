package com.gwi.selfplatform.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table T__PHR__CARD_BIND_REC.
*/
public class T_Phr_CardBindRecDao extends AbstractDao<T_Phr_CardBindRec, Long> {

    public static final String TABLENAME = "T__PHR__CARD_BIND_REC";

    /**
     * Properties of entity T_Phr_CardBindRec.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property RecNo = new Property(0, Long.class, "RecNo", true, "REC_NO");
        public final static Property EhrId = new Property(1, String.class, "EhrId", false, "EHR_ID");
        public final static Property CardNo = new Property(2, String.class, "CardNo", false, "CARD_NO");
        public final static Property CardType = new Property(3, Integer.class, "CardType", false, "CARD_TYPE");
        public final static Property CardStatus = new Property(4, Integer.class, "CardStatus", false, "CARD_STATUS");
        public final static Property BindMan = new Property(5, String.class, "BindMan", false, "BIND_MAN");
        public final static Property BindDate = new Property(6, java.util.Date.class, "BindDate", false, "BIND_DATE");
        public final static Property HospitalCode = new Property(7, String.class, "HospitalCode", false, "HOSPITAL_CODE");
        public final static Property HospitalName = new Property(8, String.class, "HospitalName", false, "HOSPITAL_NAME");
        public final static Property PatientID = new Property(9, String.class, "PatientID", false, "PATIENT_ID");
    };


    public T_Phr_CardBindRecDao(DaoConfig config) {
        super(config);
    }
    
    public T_Phr_CardBindRecDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'T__PHR__CARD_BIND_REC' (" + //
                "'REC_NO' INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: RecNo
                "'EHR_ID' TEXT NOT NULL ," + // 1: EhrId
                "'CARD_NO' TEXT," + // 2: CardNo
                "'CARD_TYPE' INTEGER," + // 3: CardType
                "'CARD_STATUS' INTEGER," + // 4: CardStatus
                "'BIND_MAN' TEXT," + // 5: BindMan
                "'BIND_DATE' INTEGER," + // 6: BindDate
                "'HOSPITAL_CODE' TEXT," + // 7: HospitalCode
                "'HOSPITAL_NAME' TEXT," + // 8: HospitalName
                "'PATIENT_ID' TEXT);"); // 9: PatientID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'T__PHR__CARD_BIND_REC'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, T_Phr_CardBindRec entity) {
        stmt.clearBindings();
 
        Long RecNo = entity.getRecNo();
        if (RecNo != null) {
            stmt.bindLong(1, RecNo);
        }
        stmt.bindString(2, entity.getEhrId());
 
        String CardNo = entity.getCardNo();
        if (CardNo != null) {
            stmt.bindString(3, CardNo);
        }
 
        Integer CardType = entity.getCardType();
        if (CardType != null) {
            stmt.bindLong(4, CardType);
        }
 
        Integer CardStatus = entity.getCardStatus();
        if (CardStatus != null) {
            stmt.bindLong(5, CardStatus);
        }
 
        String BindMan = entity.getBindMan();
        if (BindMan != null) {
            stmt.bindString(6, BindMan);
        }
 
        java.util.Date BindDate = entity.getBindDate();
        if (BindDate != null) {
            stmt.bindLong(7, BindDate.getTime());
        }
 
        String HospitalCode = entity.getHospitalCode();
        if (HospitalCode != null) {
            stmt.bindString(8, HospitalCode);
        }
 
        String HospitalName = entity.getHospitalName();
        if (HospitalName != null) {
            stmt.bindString(9, HospitalName);
        }
 
        String PatientID = entity.getPatientID();
        if (PatientID != null) {
            stmt.bindString(10, PatientID);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public T_Phr_CardBindRec readEntity(Cursor cursor, int offset) {
        T_Phr_CardBindRec entity = new T_Phr_CardBindRec( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // RecNo
            cursor.getString(offset + 1), // EhrId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // CardNo
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // CardType
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // CardStatus
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // BindMan
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // BindDate
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // HospitalCode
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // HospitalName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // PatientID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, T_Phr_CardBindRec entity, int offset) {
        entity.setRecNo(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEhrId(cursor.getString(offset + 1));
        entity.setCardNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCardType(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setCardStatus(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setBindMan(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBindDate(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setHospitalCode(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setHospitalName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPatientID(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(T_Phr_CardBindRec entity, long rowId) {
        entity.setRecNo(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(T_Phr_CardBindRec entity) {
        if(entity != null) {
            return entity.getRecNo();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
